#!/usr/bin/env bash
#!/usr/bin/env bash
#==================================================================================
# имя файла скрипта на всякий случай
SCRIPT="$0"
# описание работы скрипнта --help
showHelp() {
    echo "usage:"
    echo ""
    echo "Init application with one command:"
    echo "    ./yupe set-env dev && ./yupe init"
    echo ""
    echo "description:"
    echo "Environment commands:"
    echo "    set-env           - set application environment [ dev | prod ]"
    echo "    check-env         - print message with current application environment name"
    echo "    check-config      - check current environment docker-compose configuration files"
    echo "    build             - build docker containers for application"
    echo "    build-nocache     - force build docker containers for application without docker cached images"
    echo ""
    echo "Yupe 1.3:"
    echo "    create            - create Yupe!1.1 application in ./app directory with --no-install key, just create"
    echo "    start             - start application environment"
    echo "    stop              - stop application environment"
    echo "    ps                - list of working containers in current environment"
    echo "    restart           - restart application environment"
    echo "    update            - composer update  --lock"
    echo "    migrate           - php yii migrate --interactive=0"
    echo ""
    echo "Fixing application chown and chmod:"
    echo "    fix-chown         - change owner to current user (only on Linux and Mac OS) Windows dont need this"
    echo "    fix-chmod         - change a+rw assets, upload, runtime, config e.t.c."
    echo "    fix               - fix-chown and fix-chmod"
    echo ""
    echo ""
    echo "Для определения в каком окружении должно работать приложение выполните: ./yupe set-env [ dev | prod ]"
    echo ""
    echo "See ./yupe --help to read about all commands."

}
FOLDER=`printf '%s\n' "${PWD##*/}"`
APP_DIR=./app
COMPOSER_CREATE_APP_PATH=
COMPOSER_APP_PATH=
# Текущее окружение
CURRENT_ENV=
#printf 123456 | md5sum | awk '{print $1}'
#echo $APP_$(printf 123456 | md5sum | awk '{print $1}')

# Определяем где запущен скрипт [Linux | Windows | MacOS]
PLATFORM='unknown'
UNAMESTR=`uname`
if [[ "$UNAMESTR" == 'Linux' ]]; then
   PLATFORM='linux'
elif [[ "$UNAMESTR" == 'MINGW64_NT-10.0' ]]; then
    PLATFORM='windows'
elif [[ "$UNAMESTR" == 'Darwin' ]]; then
   PLATFORM='mac'
fi

case "$PLATFORM" in
windows)
    COMPOSER_CREATE_APP_PATH="/$PWD"
    COMPOSER_APP_PATH="/$PWD/app"
    ;;
*)
    echo ""
    COMPOSER_CREATE_APP_PATH="$PWD"
    COMPOSER_APP_PATH="$PWD/app"
    ;;
esac

# Задаем Новое окружение [ dev | prod ]
NEW_ENV=
if [ ! -z $2 ]; then
    NEW_ENV="$2"
fi

# имя функции для запуска
FUNCTION=
if [ ! -z $1 ]; then
    FUNCTION="$1"
fi

# проверка наличия приложения в папке app
check-dir(){
    if [ ! -d "$APP_DIR"/yupe ]; then
        # Control will enter here if $DIRECTORY doesn't exist.
        echo "Please, install your application to ./app/yupe folder."
        echo "To create app run command: ./yupe create"
        echo "To install/update app dependency run command: ./yupe [ install | update ]"
        exit 1
    fi
}

#полный мониторинг всех контейнеров
#Как это работает:
#Prometheus (метрическая база данных) http://localhost:9090
#AlertManager (управление оповещениями) http://localhost:9093
#Grafana (визуализация метрик) http://localhost:3000
#NodeExporter (сборщик хостовых метрик);
#cAdvisor (сборщик метрик контейнеров).
# проверка наличие файла со значением переменной окружения
check-env(){
    if [ ! -f ./docker/env/app_env ]; then
        echo "missing ./docker/env/app_env file, please create application environment file, use command './yupe set-env [ dev | prod ]'"
        exit 1
    else
        environment
    fi
}
# отображаем на экране в каком окружении работает приложение
environment(){
    CURRENT_ENV=`cat ./docker/env/app_env`
    echo "Current application environment: $CURRENT_ENV"
}
# изменяем окружение в котором будет работать приложение
set-env(){
    echo "Updating application environment..."
    case "$NEW_ENV" in
    dev|prod)
        if [ -f ./docker/env/app_env ]; then
            CURRENT_ENV=`cat ./docker/env/app_env`
            docker-compose -f $CURRENT_ENV.yml down
        fi
        echo "Setting up new application environment to: $NEW_ENV"
        cp ./docker/env/$NEW_ENV/app_env ./docker/env/app_env
        echo "Success"
        check-env
        ;;
    *) #если введено с клавиатуры то, что в case не описывается, выполнять следующее:
        echo "ERROR: Вторым параметром команды укажите в каком окружении необходимо запускать приложение dev, prod"
        exit 1;
    esac
}

build-nocache(){
    echo "Building docker images for $CURRENT_ENV environment without cache."
    docker-compose -f $CURRENT_ENV.yml --build-args USER=${USER} build --no-cache
}

build(){
    echo "Building docker images for $CURRENT_ENV environment with cache."
    docker-compose -f $CURRENT_ENV.yml build
}
ps(){
    echo "Container status in $CURRENT_ENV environment:"
    docker-compose -f $CURRENT_ENV.yml ps
}

start(){
    echo "Start Yupe! in $CURRENT_ENV environment"
    docker-compose -f $CURRENT_ENV.yml up -d
    echo ''
}
stop(){
    echo "Stop Yupe! in $CURRENT_ENV environment"
    docker-compose -f $CURRENT_ENV.yml down
    echo ''
}
restart(){
    echo "Restart Yupe! in $CURRENT_ENV environment"
    docker-compose -f $CURRENT_ENV.yml down
    docker-compose -f $CURRENT_ENV.yml up -d
    echo ''
}

check-config(){
    echo "Config status in $CURRENT_ENV environment:"
    docker-compose -f $CURRENT_ENV.yml config
}

create(){
    echo "Creating Yupe! 1.3 in ./app/yupe folder"
    echo "Running:git clone https://github.com/yupe/yupe.git"
    cd app
    git clone https://github.com/yupe/yupe.git
    cd ..
#   docker-compose -f $CURRENT_ENV.yml exec php bash -c 'composer create-project yupe/yupe:1.3 --prefer-dist'
#   fix-chown
#   fix-chmod
}

install(){
    echo "composer install --prefer-dist"
    docker-compose -f $CURRENT_ENV.yml exec php composer install --prefer-dist
}

update(){
        echo "Running: composer update --lock --no-interaction"
        docker-compose exec php composer update --lock --no-interaction
}

migrate(){
    echo "Apply application DB migrations"
    echo "Running: docker-compose exec php php yii migrate --interactive=0"
    docker-compose exec php php yii migrate --interactive=0
}

fix-chown(){
    case "$PLATFORM" in
    linux|mac)
        echo "Changing owner application files to current user: $USER"
        sudo chown $USER:$USER -R .
        ;;
    esac
}

fix-chmod(){
    case "$PLATFORM" in
    windows)
        ;;
    linux|mac)
        echo "Changing chmod application files"
        chmod a+rw -R ./app/yupe/public/assets ./app/yupe/public/uploads ./app/yupe/protected/runtime ./app/yupe/protected/config ./app/yupe/vendor ./docker/env ./docker/logs
        ;;
    esac
}

fix(){
    fix-chown
    fix-chmod
}

logs(){
    docker-compose -f $CURRENT_ENV.yml logs
}

create-network(){
    echo "Creating docker network traefik"
    docker network create traefik
}

init(){
    create-network
    build
    create
    start
    install
}
#echo "/$PWD"
#exit 0
case "$1" in
-h|--help)
    showHelp
    ;;
check-env|environment)
    check-env
    ;;
set-env)
    set-env
    ;;
*)
    if [ ! -z $(type -t $FUNCTION | grep function) ]; then
        
        check-env
        $1
    else
        showHelp
    fi
esac
